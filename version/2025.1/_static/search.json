[
    {
        "objectID": "getting-started/install",
        "href": "getting-started/install.html#install-pyansys",
        "title": "Getting started > Install PyAnsys",
        "section": "Install PyAnsys",
        "text": "The PyAnsys metapackage is distributed as a Python library. Its installation\nfollows the standard Python package installation process.\nInstall PyAnsys"
    },
    {
        "objectID": "getting-started/install",
        "href": "getting-started/install.html#online-installation",
        "title": "Getting started > Install PyAnsys > Online installation",
        "section": "Online installation",
        "text": "Download and install PyAnsys from PyPI:\nThe PyAnsys 2025.1.3 metapackage includes the following projects:\nOnline installation"
    },
    {
        "objectID": "getting-started/install",
        "href": "getting-started/install.html#additional-targets",
        "title": "Getting started > Install PyAnsys > Additional targets",
        "section": "Additional targets",
        "text": "The PyAnsys metapackage contains various targets for installing additional\nlibraries and tools.\nInstall by running:\nInstall by running:\nInstall by running:\nInstall by running:\nAdditional targets"
    },
    {
        "objectID": "getting-started/install",
        "href": "getting-started/install.html#offline-installation",
        "title": "Getting started > Install PyAnsys > Offline installation",
        "section": "Offline installation",
        "text": "Start by downloading the wheelhouse artifact for your platform:\n Platform\n Python 3.10\n Python 3.11\n Python 3.12\n Windows\nDownload wheelhouse\nDownload wheelhouse\nDownload wheelhouse\n macOS\nDownload wheelhouse\nDownload wheelhouse\nDownload wheelhouse\n Linux\nDownload wheelhouse\nDownload wheelhouse\nDownload wheelhouse\nNext, decompress the artifacts:\nFinally, install the PyAnsys metapackage using previously downloaded wheelhouse:\nOffline installation"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#prerequisites",
        "title": "Getting started > Prerequisites",
        "section": "Prerequisites",
        "text": "You need to have the following prerequisites to get started with PyAnsys:\nA valid Python version\nA licensed version of Ansys\nPrerequisites"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#download-and-install-ansys",
        "title": "Getting started > Prerequisites > Download and install Ansys",
        "section": "Download and install Ansys",
        "text": "Download Ansys software from the Ansys Customer Portal. Ensure you have a\nlicense to use the software.\nDownload and install Ansys"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#download-and-install-python",
        "title": "Getting started > Prerequisites > Download and install Python",
        "section": "Download and install Python",
        "text": "Download and install the latest stable version of Python from the\nhttps://www.python.org/downloads.\nDownload and install Python"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#supported-python-versions",
        "title": "Getting started > Prerequisites > Supported Python versions",
        "section": "Supported Python versions",
        "text": "The PyAnsys ecosystem follows SPEC-0 for Python version support. This\nimplies that PyAnsys packages drop support for a Python version three years\nafter their initial release:\nIn previous diagram:\nPython versions in gray are no longer supported\nPython versions in light blue are currently supported\nPython versions in dark blue are not supported yet\nAdoption and deprecation of Python versions in the PyAnsys ecosystem are\ntentative. Delays may occur due to third party dependencies.\nBelow you can find a list of the Python versions supported by each PyAnsys\nmetapackage release:\nSupported Python versions"
    },
    {
        "objectID": "tools/toolkits/index",
        "href": "tools/toolkits/index.html#pyansys-toolkits",
        "title": "PyAnsys toolkits",
        "section": "PyAnsys toolkits",
        "text": "PyAnsys toolkits\nPyAEDT toolkits\nPyAnsys toolkits\nContents"
    },
    {
        "objectID": "tools/toolkits/index",
        "href": "tools/toolkits/index.html#pyaedt-toolkits",
        "title": "PyAnsys toolkits > PyAEDT toolkits",
        "section": "PyAEDT toolkits",
        "text": "Shared Ansys Electronics Desktop (AEDT) toolkit components to enable package interoperability and minimize maintenance\nPython wrapper for modeling antennas using Ansys Electronics Desktop (AEDT) via PyAEDT\nPython wrapper for automating the segmentation and skew of interior permanent magnet (IPM) and surface permanent magnet (SPM) motors using Ansys Electronics Desktop (AEDT)\nPyAEDT toolkits"
    },
    {
        "objectID": "api",
        "href": "api.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "The pyansys metapackage on its own does not have a specific API. The only information specific-only\nto this package that can be provided is its version. This can be looked up as follows:\nHowever, each of the PyAnsys packages that shape the pyansys metapackage have their own specific API\nreference section. In order to navigate through them, please refer to their documentation.\nAPI reference\npyansys\npyansys"
    },
    {
        "objectID": "api",
        "href": "api.html#pyansys-packages-api-reference",
        "title": "API reference > PyAnsys packages API reference",
        "section": "PyAnsys packages API reference",
        "text": "PyAnsys packages API reference"
    },
    {
        "objectID": "index",
        "href": "index.html#pyansys",
        "title": "PyAnsys",
        "section": "PyAnsys",
        "text": "Welcome to the PyAnsys project. While this project originated as a single pyansys package,\nit is now a collection of many Python packages for using Ansys products through Python:\nPyAnsys\npyansys"
    },
    {
        "objectID": "user_guide",
        "href": "user_guide.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "User guides for the different pyansys packages can be found in their specific documentation.\nThe pyansys metapackage itself has no functionalities on its own. It is only a bundle of the\ndifferent public PyAnsys libraries that are compatible with a given Ansys Unified Install depending\non the version requested.\nUser guide\npyansys\npyansys"
    },
    {
        "objectID": "user_guide",
        "href": "user_guide.html#pyansys-packages-user-guides",
        "title": "User guide > PyAnsys packages user guides",
        "section": "PyAnsys packages user guides",
        "text": "PyAnsys packages user guides"
    },
    {
        "objectID": "getting-started/about",
        "href": "getting-started/about.html#about",
        "title": "Getting started > About",
        "section": "About",
        "text": "PyAnsys is a collection of Python libraries and tools developed by ANSYS,\nInc. It provides access to Ansys products by using a Python interface,\nenabling users to perform engineering simulations, data processing, and\nautomation tasks.\nTo ease the installation of the libraries and tools, PyAnsys provides a Python\nmetapackage. This ensures compatibility between its projects.\nAbout"
    },
    {
        "objectID": "getting-started/about",
        "href": "getting-started/about.html#key-features-of-pyansys",
        "title": "Getting started > About > Key features of PyAnsys",
        "section": "Key features of PyAnsys",
        "text": "PyAnsys shines in the following areas:\nAutomation of workflows: PyAnsys enables users to automate repetitive or\ncomplex simulation tasks.\nIntegration with the Python ecosystem: users can leverage the Python\necosystem.\nCross-product functionality: PyAnsys provides Python APIs for various\nAnsys services and products. By allowing users to interact with multiple\nproducts in a single environment, PyAnsys enables users to streamline their\nworkflows.\nKey features of PyAnsys"
    },
    {
        "objectID": "getting-started/about",
        "href": "getting-started/about.html#the-pyansys-ecosystem",
        "title": "Getting started > About > The PyAnsys ecosystem",
        "section": "The PyAnsys ecosystem",
        "text": "PyAnsys libraries can be classified into wrappers and tools.\nWrappers are Python libraries that provide direct access to Ansys products.\nCommunication between the product and the library is performed via gRPC. Therefore, users can have the product installed remotely and connect\nto that remote instance.\nTools are Python libraries that provide additional functionality to the\nwrappers.\nThe PyAnsys ecosystem"
    },
    {
        "objectID": "tools/libraries/index",
        "href": "tools/libraries/index.html#tooling-libraries",
        "title": "Tooling libraries",
        "section": "Tooling libraries",
        "text": "Simple gRPC API tool for moving files between a client and a remote server\nPython utility for launching Ansys products on a local machine and configuring their launch settings\nLibrary to locate Ansys products in a local machine\nUtility library to compile .proto files to Python source when building the package wheel\nPython interface between PyAnsys libraries and plotting backends\nTool for reporting your Python environmentâ€™s package versions and hardware resources in a standardized way\nTool for defining basic variables, types, metadata, and values intended to provide interoperability between all products\nTool for backwards and forwards server support\nPythonic interface for units, unit systems, and unit conversions\nPython package for unifying material management across the Ansys portfolio\nTooling libraries\n.proto"
    },
    {
        "objectID": "examples",
        "href": "examples.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "Examples for the different pyansys packages can be found in their specific documentation.\nExamples\npyansys"
    },
    {
        "objectID": "examples",
        "href": "examples.html#pyansys-packages-examples",
        "title": "Examples > PyAnsys packages examples",
        "section": "PyAnsys packages examples",
        "text": "Combining PyAnsys libraries?\nIf you are using multiple PyAnsys libraries, you can find examples on how to combine them\nin the PyAnsys Workflows page. This page contains\npractical examples on how to chain different PyAnsys libraries together.\nPyAnsys packages examples"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#standalone-projects",
        "title": "Standalone projects",
        "section": "Standalone projects",
        "text": "Standalone projects\nGeneral purpose\nDemo purposes\nRepository management\nArtificial intelligence\nDocumentation\nStandalone projects\nContents"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#general-purpose",
        "title": "Standalone projects > General purpose",
        "section": "General purpose",
        "text": "Simple cross-platform QT application to install Python and PyAnsys packages\nPyAnsys cheat sheets for different libraries as quick reference guides\nAnsys project used to calculate Power Density or Cumulative Distribution Function\nGeneral purpose"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#demo-purposes",
        "title": "Standalone projects > Demo purposes",
        "section": "Demo purposes",
        "text": "Demonstrating the REST and gRPC communication protocols via client-server interactions\nDemo purposes"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#repository-management",
        "title": "Standalone projects > Repository management",
        "section": "Repository management",
        "text": "Ansys tool for creating new projects according to Ansys guidelines\nCollection of GitHub Workflows to be reused by projects in the Ansys ecosystem\nAnsys repository containing customized pre-commit hooks\nAnsys tool intended to synchronize the content of two different repositories\nRepository for updating an organizationâ€™s all-members team automatically\nRepository management\nall-members\nall-members"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#artificial-intelligence",
        "title": "Standalone projects > Artificial intelligence",
        "section": "Artificial intelligence",
        "text": "Python development tool for leveraging the power of OpenAI to automatically generate suggestions for improving GitHub pull requests\nArtificial intelligence"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#documentation",
        "title": "Standalone projects > Documentation",
        "section": "Documentation",
        "text": "Extension of the popular PyData Sphinx Theme that is used by Numpy, Pandas, PyVista, and many more scientific Python packages\nEnhanced Python API to Meilisearch\nPython development tool for leveraging the power of OpenAI to automatically generate suggestions for improving GitHub pull requests\nDocumentation"
    },
    {
        "objectID": "getting-started",
        "href": "getting-started.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "This page helps you quickly get started with PyAnsys. It lists all the\nprerequisites and guides you step by step to install the project on your\nplatform.\nLearn more about PyAnsys and its ecosystem\nWhat you need prior installing PyAnsys\nGuidelines on how to install PyAnsys in your system\nGetting started"
    },
    {
        "objectID": "tools/index",
        "href": "tools/index.html#other-tools",
        "title": "Other tools",
        "section": "Other tools",
        "text": "Standalone projects, tooling libraries and toolkits related to the PyAnsys ecosystem.\nStandalone projects to exploit the full potential of the PyAnsys ecosystem\nAdditional libraries delivered with the tools target of the PyAnsys metapackage\nToolkits built on top of PyAnsys libraries for specific purposes.\nOther tools\ntools"
    }
]