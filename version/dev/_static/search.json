[
    {
        "objectID": "supported_versions",
        "href": "supported_versions.html#python-versions",
        "title": "Python versions",
        "section": "Python versions",
        "text": "The PyAnsys ecosystem follows SPEC-0 for Python version support,\nwhich is also similar to NEP 29. This means:\nPyAnsys packages are expected to drop support for Python versions 3 years after their\ninitial release.\nYou can find below the timeline for the end of support for each Python version according to the SPEC-0 policy\nas well as a table showing the Python versions supported by each PyAnsys metapackage, which might slightly\ndiffer from the SPEC-0 policy but is always aligned with it.\nGrayed out Python versions are no longer supported by the current version of the PyAnsys metapackage.\nLight blue Python versions are currently supported.\nDark blue Python versions are upcoming Python releases for which support is expected in the future.\nSome extra remarks:\nThe length of the Python version boxes is indicative of the support duration according to the SPEC-0 policy.\nThe color of the Python version boxes is indicative of the PyAnsys metapackage current support.\nBelow you can find a list of the Python versions supported by each PyAnsys metapackage release:\nPackage version\nPython versions supported\n2023.1\nPython 3.7 - Python 3.10\n2023.2\nPython 3.8 - Python 3.11\n2024.1\nPython 3.9 - Python 3.12\n2024.2\nPython 3.9 - Python 3.12\ndevelopment\nPython 3.10 - Python 3.12\nPython versions"
    },
    {
        "objectID": "package_versions/version_2024.2",
        "href": "package_versions/version_2024.2.html#package-versions-in-pyansys-20242",
        "title": "Package versions in PyAnsys 2024.2",
        "section": "Package versions in PyAnsys 2024.2",
        "text": "The PyAnsys packages delivered in version 2024.2 are:\nLibrary\nVersion\nansys-acp-core\n0.1b2\nansys-additive-core\n0.18.1\nansys-additive-widgets\n0.2.1\nansys-conceptev-core\n0.1.4\nansys-dpf-composites\n0.5.0\nansys-dpf-core\n0.12.2\nansys-dpf-post\n0.8.0\nansys-dyna-core\n0.4.15\nansys-dynamicreporting-core\n0.6.0\nansys-edb-core\n0.1.6\nansys-fluent-core\n0.22.0\nansys-geometry-core\n0.6.6\nansys-hps-client\n0.8.0\nansys-mapdl-core\n0.68.4\nansys-math-core\n0.1.5\nansys-mechanical-core\n0.11.5\nansys-meshing-prime\n0.6.2\nansys-modelcenter-workflow\n0.1.1\nansys-motorcad-core\n0.5.5\nansys-optislang-core\n0.8.0\nansys-platform-instancemanagement\n1.1.2\nansys-pyensight-core\n0.8.8\nansys-rocky-core\n0.2.0\nansys-seascape\n0.2.0\nansys-sherlock-core\n0.6.0\nansys-simai-core\n0.2.2\nansys-sound-core\n0.1.3\nansys-systemcoupling-core\n0.6.0\nansys-turbogrid-core\n0.4.1\nansys-workbench-core\n0.6.0\npyaedt\n0.9.11\npyedb\n0.23.0\npygranta\n2024.2.0\npytwin\n0.7.0\nansys-mapdl-reader\n0.53.0\nansys-fluent-visualization\n0.11.0\nansys-materials-manager\n0.2.3\nansys-tools-filetransfer\n0.1.0\nansys-tools-local-product-launcher\n0.1.0\nansys-tools-path\n0.6.0\nansys-tools-visualization-interface\n0.4.0\nansys-units\n0.3.2\npyansys-tools-report\n0.7.3\npyansys-tools-versioning\n0.5.0\npyansys-tools-variableinterop\n0.1.1\nPackage versions in PyAnsys 2024.2"
    },
    {
        "objectID": "package_versions/version_2025.1",
        "href": "package_versions/version_2025.1.html#package-versions-in-pyansys-20251",
        "title": "Package versions in PyAnsys 2025.1",
        "section": "Package versions in PyAnsys 2025.1",
        "text": "The PyAnsys packages delivered in version 2025.1 are:\nLibrary\nVersion\nansys-acp-core\n0.1b2\nansys-additive-core\n0.18.1\nansys-additive-widgets\n0.2.1\nansys-conceptev-core\n0.5\nansys-dpf-composites\n0.6.1\nansys-dpf-core\n0.13.0\nansys-dpf-post\n0.9.0\nansys-dyna-core\n0.5.0\nansys-dynamicreporting-core\n0.7.0\nansys-edb-core\n0.1.7\nansys-fluent-core\n0.26.0\nansys-geometry-core\n0.7.2\nansys-hps-client\n0.9.0\nansys-mapdl-core\n0.68.4\nansys-math-core\n0.1.5\nansys-mechanical-core\n0.11.7\nansys-meshing-prime\n0.6.2\nansys-modelcenter-workflow\n0.1.1\nansys-motorcad-core\n0.5.5\nansys-optislang-core\n0.8.0\nansys-platform-instancemanagement\n1.1.2\nansys-pyensight-core\n0.8.11\nansys-rocky-core\n0.2.0\nansys-seascape\n0.2.0\nansys-sherlock-core\n0.7.1\nansys-simai-core\n0.2.4\nansys-sound-core\n0.1.3\nansys-systemcoupling-core\n0.8.0\nansys-turbogrid-core\n0.4.1\nansys-workbench-core\n0.6.0\npyaedt\n0.10.3\npyedb\n0.29.0\npygranta\n2024.2.0\npytwin\n0.7.0\nansys-mapdl-reader\n0.54.1\nansys-fluent-visualization\n0.14.0\nansys-materials-manager\n0.2.3\nansys-tools-filetransfer\n0.1.0\nansys-tools-local-product-launcher\n0.1.0\nansys-tools-path\n0.6.0\nansys-tools-visualization-interface\n0.4.4\nansys-units\n0.3.2\npyansys-tools-report\n0.8.0\npyansys-tools-versioning\n0.6.0\npyansys-tools-variableinterop\n0.1.1\nPackage versions in PyAnsys 2025.1"
    },
    {
        "objectID": "getting_started",
        "href": "getting_started.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "PyAnsys libraries fall into two categories:\nWrappers over products like MAPDL, Fluent, or AEDT\nSupporting libraries like DPF\nMost PyAnsys packages require a local installation of Ansys. The version\nof Ansys installed dictates the interface and features available to\nyou. However, PyAnsys libraries use gRPC to communicate to the\nproducts, you can have the product installed remotely and connect to that\nremote instance. This still requires that you need a copy of Ansys installed on\nthe host machine.\nFor more information on getting a licensed copy of Ansys, visit Ansys. If you are a student, consider installing a student version by\nvisiting Ansys for Students.\nGetting started"
    },
    {
        "objectID": "getting_started",
        "href": "getting_started.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "There are several ways of installing PyAnsys depending on your use case, but\nthe easiest is simply to run:\nThis installs all the PyAnsys libraries for the latest released\nversion of Ansys, for example, v2023R1.\nYou can always install libraries individually by visiting the install page for\neach library. For example, for PyAEDT:\nInstallation"
    },
    {
        "objectID": "getting_started",
        "href": "getting_started.html#user-mode-installation",
        "title": "Getting started > User mode installation",
        "section": "User mode installation",
        "text": "Before installing pyansys in user mode, ensure that you have the latest\nversion of pip with:\nThen, install pyansys with:\nIf you are interested in installing an extra target such as fluent-all:\nIf you are interested in installing a specific version such as 2023.1.0:\nUser mode installation\npyansys\npyansys\nfluent-all\n2023.1.0"
    },
    {
        "objectID": "getting_started",
        "href": "getting_started.html#offline-mode-installation",
        "title": "Getting started > Offline mode installation",
        "section": "Offline mode installation",
        "text": "If you lack an internet connection on your installation machine, the\nrecommended way of installing the pyansys metapackage is downloading the\nwheelhouse archive from the Releases Page for your\ncorresponding machine architecture.\nEach wheelhouse archive contains all the Python wheels necessary to install\npyansys metapackage from scratch on Windows, Linux, and MacOS from Python\n3.10 to 3.12. You can install this on an isolated system with a fresh Python\ninstallation or on a virtual environment.\nFor example, on Linux with Python 3.10, unzip the wheelhouse archive and install\nit with the following:\nIf youâ€™re on Windows with Python 3.10, unzip to a wheelhouse directory and install using the same command as above.\nConsider installing using a virtual environment.\nOffline mode installation\npyansys\npyansys"
    },
    {
        "objectID": "getting_started",
        "href": "getting_started.html#versioning-system",
        "title": "Getting started > Versioning system",
        "section": "Versioning system",
        "text": "The pyansys metapackage follows a semantic-like versioning system, though\nit has been adapted to the Ansys product release mechanism. In that sense, the\nfollowing kind of versioning system is followed:\nWhere:\nXXXX is the Ansys product release year (for example, 2022)\nY is the Ansys product release within the same year (for example, 1,\nwhich relates to R1)\nZZ is the patched versions to the pyansys metapackage, if any.\nConsequently, the first pyansys metapackage compatible with the 2024 R2\nrelease would be:\nAnd any subsequent patched version of that package would be:\nYou can request for a specific version install when pip installing your package:\nVersioning system\npyansys\nXXXX\nY\nZZ\npyansys\npyansys"
    },
    {
        "objectID": "user_guide",
        "href": "user_guide.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "User guides for the different pyansys packages can be found in their specific documentation.\nThe pyansys metapackage itself has no functionalities on its own. It is only a bundle of the\ndifferent public PyAnsys libraries that are compatible with a given Ansys Unified Install depending\non the version requested.\nUser guide\npyansys\npyansys"
    },
    {
        "objectID": "user_guide",
        "href": "user_guide.html#pyansys-packages-user-guides",
        "title": "User guide > PyAnsys packages user guides",
        "section": "PyAnsys packages user guides",
        "text": "PyAnsys packages user guides"
    },
    {
        "objectID": "package_versions/version_dev",
        "href": "package_versions/version_dev.html#package-versions-in-pyansys-dev",
        "title": "Package versions in PyAnsys dev",
        "section": "Package versions in PyAnsys dev",
        "text": "The PyAnsys packages delivered in version dev are:\nLibrary\nVersion\nansys-acp-core\n0.1b2\nansys-additive-core\n0.18.1\nansys-additive-widgets\n0.2.1\nansys-conceptev-core\n0.5\nansys-dpf-composites\n0.6.1\nansys-dpf-core\n0.13.2\nansys-dpf-post\n0.9.0\nansys-dyna-core\n0.5.0\nansys-dynamicreporting-core\n0.8.0\nansys-edb-core\n0.1.9\nansys-fluent-core\n0.26.1\nansys-geometry-core\n0.7.5\nansys-hps-client\n0.9.0\nansys-mapdl-core\n0.68.6\nansys-math-core\n0.2.0\nansys-mechanical-core\n0.11.9\nansys-meshing-prime\n0.6.2\nansys-modelcenter-workflow\n0.1.1\nansys-motorcad-core\n0.6.3\nansys-optislang-core\n0.9.0\nansys-platform-instancemanagement\n1.1.2\nansys-pyensight-core\n0.9.0\nansys-rocky-core\n0.2.0\nansys-seascape\n0.2.0\nansys-sherlock-core\n0.7.1\nansys-simai-core\n0.2.5\nansys-sound-core\n0.1.3\nansys-systemcoupling-core\n0.8.0\nansys-turbogrid-core\n0.4.1\nansys-workbench-core\n0.7.0\npyaedt\n0.11.2\npyedb\n0.31.0\npygranta\n2024.2.0\npytwin\n0.7.0\nansys-mapdl-reader\n0.54.1\nansys-fluent-visualization\n0.14.0\nansys-materials-manager\n0.2.3\nansys-tools-filetransfer\n0.1.0\nansys-tools-local-product-launcher\n0.1.0\nansys-tools-path\n0.6.0\nansys-tools-visualization-interface\n0.5.0\nansys-units\n0.3.2\npyansys-tools-report\n0.8.1\npyansys-tools-versioning\n0.6.0\npyansys-tools-variableinterop\n0.1.1\nPackage versions in PyAnsys dev"
    },
    {
        "objectID": "examples",
        "href": "examples.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "Examples for the different pyansys packages can be found in their specific documentation.\nExamples\npyansys"
    },
    {
        "objectID": "examples",
        "href": "examples.html#pyansys-packages-examples",
        "title": "Examples > PyAnsys packages examples",
        "section": "PyAnsys packages examples",
        "text": "Combining PyAnsys libraries?\nIf you are using multiple PyAnsys libraries, you can find examples on how to combine them\nin the PyAnsys Workflows page. This page contains\npractical examples on how to chain different PyAnsys libraries together.\nPyAnsys packages examples"
    },
    {
        "objectID": "package_versions/version_2023.2",
        "href": "package_versions/version_2023.2.html#package-versions-in-pyansys-20232",
        "title": "Package versions in PyAnsys 2023.2",
        "section": "Package versions in PyAnsys 2023.2",
        "text": "The PyAnsys packages delivered in version 2023.2 are:\nLibrary\nVersion\nansys-mapdl-core\n0.64.1\nansys-dpf-core\n0.8.1\nansys-dpf-post\n0.4.0\nansys-dpf-gate\n0.3.1\nansys-dpf-composites\n0.2.0\nansys-dynamicreporting-core\n0.4.0\nansys-pyensight-core\n0.5.3\nansys-fluent-core\n0.14.0\npyaedt\n0.6.76\nansys-platform-instancemanagement\n1.1.1\nansys-grantami-bomanalytics\n1.1.3\nansys-grantami-recordlists\n1.0.0\nansys-openapi-common\n1.2.1\nansys-seascape\n0.2.0\nansys-sherlock-core\n0.2.0\nansys-meshing-prime\n0.4.1\npytwin\n0.3.0\nansys-systemcoupling-core\n0.1.3\nansys-motorcad-core\n0.1.3\nansys-math-core\n0.1.1\nansys-optislang-core\n0.2.1\nansys-mechanical-core\n0.8.0\nansys-mapdl-reader\n0.52.13\nansys-fluent-visualization\n0.7.1\nansys-fluent-parametric\n0.7.1\nPackage versions in PyAnsys 2023.2"
    },
    {
        "objectID": "tools/index",
        "href": "tools/index.html#other-tools",
        "title": "Other tools",
        "section": "Other tools",
        "text": "Standalone projects, tooling libraries and toolkits related to the PyAnsys ecosystem.\nStandalone projects to exploit the full potential of the PyAnsys ecosystem\nAdditional libraries delivered with the tools target of the PyAnsys metapackage\nToolkits built on top of PyAnsys libraries for specific purposes.\nOther tools\ntools"
    },
    {
        "objectID": "tools/libraries/index",
        "href": "tools/libraries/index.html#tooling-libraries",
        "title": "Tooling libraries",
        "section": "Tooling libraries",
        "text": "Simple gRPC API tool for moving files between a client and a remote server\nPython utility for launching Ansys products on a local machine and configuring their launch settings\nLibrary to locate Ansys products in a local machine\nUtility library to compile .proto files to Python source when building the package wheel\nPython interface between PyAnsys libraries and plotting backends\nTool for reporting your Python environmentâ€™s package versions and hardware resources in a standardized way\nTool for defining basic variables, types, metadata, and values intended to provide interoperability between all products\nTool for backwards and forwards server support\nPythonic interface for units, unit systems, and unit conversions\nPython package for unifying material management across the Ansys portfolio\nTooling libraries\n.proto"
    },
    {
        "objectID": "api",
        "href": "api.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "The pyansys metapackage on its own does not have a specific API. The only information specific-only\nto this package that can be provided is its version. This can be looked up as follows:\nHowever, each of the PyAnsys packages that shape the pyansys metapackage have their own specific API\nreference section. In order to navigate through them, please refer to their documentation.\nAPI reference\npyansys\npyansys"
    },
    {
        "objectID": "api",
        "href": "api.html#pyansys-packages-api-reference",
        "title": "API reference > PyAnsys packages API reference",
        "section": "PyAnsys packages API reference",
        "text": "PyAnsys packages API reference"
    },
    {
        "objectID": "index",
        "href": "index.html#pyansys",
        "title": "PyAnsys",
        "section": "PyAnsys",
        "text": "Welcome to the PyAnsys project. While this project originated as a single pyansys package,\nit is now a collection of many Python packages for using Ansys products through Python:\nPythonic interface to Ansys Composite PrepPost (ACP)\nPythonic interface to the Ansys Additive service\nPyAdditive widget toolkit to visualize additive parametric study results\nPythonic interface to Ansys Electronics Desktop (AEDT)\nPythonic interface to the Ansys Geometry service\nPythonic interface to PyAnsys Math libraries\nPythonic interface to Ansys Sound\nPythonic interface to Ansys ConceptEV library\nPythonic interface to the Data Processing Framework (DPF) for building advanced and customized workflows\nPythonic interface to access and postprocess Ansys solver result files\nPythonic interface to postprocess layered and short-fiber composite models\nPythonic interface to build the Ansys DYNA input deck, submit it to the Ansys LS-DYNA solver, and postprocess its results\nPythonic interface to Ansys Dynamic Reporting for service and control of its database and reports\nPythonic interface to the Ansys Electronics Database (EDB) client library\nPythonic interface to Ansys Electronics Database (EDB)\nPythonic interface to EnSight, the Ansys simulation postprocessor\nPythonic interface to Ansys Fluent\nPythonic interface to visualize Ansys Fluent simulations\nPythonic interface to Ansys Granta MI services\nPythonic interface to Ansys HPC Platform Services (HPS)\nPythonic interface to Ansys MAPDL (Mechanical APDL)\nPythonic interface to read legacy MAPDL result files (MAPDL 14.5 and later)\nPythonic interface to Ansys Mechanical\nPythonic interface to Ansys ModelCenter\nPythonic interface to Ansys Motor-CAD\nPythonic interface to Ansys optiSLang\nPythonic interface to the Ansys PIM (Product Instance Management) API\nPython library to acquire geometries and prepare surface and volume meshes for multiple solvers\nPython interface to Ansys Rocky using Rocky PrePost API\nPythonic interface to Ansys RedHawkSC and TotemSC\nPythonic interface to Ansys Sherlock\nPythonic interface to SimAI\nPythonic interface to Ansys System Coupling\nPythonic interface to Ansys TurboGrid, a high-quality turbomachinery meshing software app\nPythonic interface to communicate with consumption workflows for Ansys digital twins\nPythonic interface to Ansys Workbench\nShared Ansys software components to enable package interoperability and minimize maintenance\nPyAnsys\npyansys"
    },
    {
        "objectID": "tools/toolkits/index",
        "href": "tools/toolkits/index.html#pyansys-toolkits",
        "title": "PyAnsys toolkits",
        "section": "PyAnsys toolkits",
        "text": "PyAnsys toolkits\nPyAEDT toolkits\nPyAnsys toolkits\nContents"
    },
    {
        "objectID": "tools/toolkits/index",
        "href": "tools/toolkits/index.html#pyaedt-toolkits",
        "title": "PyAnsys toolkits > PyAEDT toolkits",
        "section": "PyAEDT toolkits",
        "text": "Shared Ansys Electronics Desktop (AEDT) toolkit components to enable package\ninteroperability and minimize maintenance\nPython wrapper for modeling antennas using Ansys Electronics Desktop (AEDT) via PyAEDT\nPython wrapper for automating the segmentation and skew of interior permanent magnet (IPM)\nand surface permanent magnet (SPM) motors using Ansys Electronics Desktop (AEDT)\nPyAEDT toolkits"
    },
    {
        "objectID": "package_versions/version_2023.1",
        "href": "package_versions/version_2023.1.html#package-versions-in-pyansys-20231",
        "title": "Package versions in PyAnsys 2023.1",
        "section": "Package versions in PyAnsys 2023.1",
        "text": "The PyAnsys packages delivered in version 2023.1 are:\nLibrary\nVersion\nansys-mapdl-core\n0.63.2\nansys-dpf-core\n0.6.0\nansys-dpf-post\n0.2.5\nansys-dpf-gate\n0.2.1\nansys-fluent-core\n0.11.0\npyaedt\n0.6.3\nansys-platform-instancemanagement\n1.0.2\nansys-grantami-bomanalytics\n1.0.1\nansys-openapi-common\n1.1.1\npytwin\n0.2.0\nansys-seascape\n0.2.0\nansys-meshing-prime\n0.2.0\nansys-mapdl-reader\n0.52.0\nansys-fluent-visualization\n0.5.0\nansys-fluent-parametric\n0.5.0\nansys-sphinx-theme\n0.5.2\nPackage versions in PyAnsys 2023.1"
    },
    {
        "objectID": "package_versions/version_2024.1",
        "href": "package_versions/version_2024.1.html#package-versions-in-pyansys-20241",
        "title": "Package versions in PyAnsys 2024.1",
        "section": "Package versions in PyAnsys 2024.1",
        "text": "The PyAnsys packages delivered in version 2024.1 are:\nLibrary\nVersion\nansys-additive-core\n0.17.2\nansys-dpf-composites\n0.4.0\nansys-dpf-core\n0.10.1\nansys-dpf-post\n0.6.0\nansys-dyna-core\n0.4.13\nansys-dynamicreporting-core\n0.5.1\nansys-edb-core\n0.1.3\nansys-fluent-core\n0.19.2\nansys-geometry-core\n0.4.11\nansys-hps-client\n0.7.1\nansys-mapdl-core\n0.67.0\nansys-math-core\n0.1.3\nansys-mechanical-core\n0.10.8\nansys-meshing-prime\n0.5.1\nansys-motorcad-core\n0.4.3\nansys-openapi-common\n1.5.1\nansys-optislang-core\n0.6.3\nansys-platform-instancemanagement\n1.1.2\nansys-pyensight-core\n0.7.8\nansys-rocky-core\n0.1.0\nansys-seascape\n0.2.0\nansys-sherlock-core\n0.4.0\nansys-simai-core\n0.1.4\nansys-systemcoupling-core\n0.4.1\nansys-turbogrid-core\n0.4.0\npyaedt\n0.7.10\npygranta\n2024.1.0\npytwin\n0.6.0\nansys-mapdl-reader\n0.53.0\nansys-fluent-visualization\n0.8.0\nansys-fluent-parametric\n0.9.0\nansys-units\n0.2.0\nansys-tools-path\n0.4.1\npyansys-tools-report\n0.7.0\npyansys-tools-versioning\n0.5.0\nPackage versions in PyAnsys 2024.1"
    },
    {
        "objectID": "package_versions/index",
        "href": "package_versions/index.html#package-versions",
        "title": "Package versions",
        "section": "Package versions",
        "text": "Users can find below the list of PyAnsys packages available in the various\nPyAnsys metapackages. The tables shows the package versions available in each\nmetapackage release.\nPackage versions"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#standalone-projects",
        "title": "Standalone projects",
        "section": "Standalone projects",
        "text": "Standalone projects\nGeneral purpose\nDemo purposes\nRepository management\nArtificial intelligence\nDocumentation\nStandalone projects\nContents"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#general-purpose",
        "title": "Standalone projects > General purpose",
        "section": "General purpose",
        "text": "Simple cross-platform QT application to install Python and PyAnsys packages\nPyAnsys cheat sheets for different libraries as quick reference guides\nAnsys project used to calculate Power Density or Cumulative Distribution Function\nGeneral purpose"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#demo-purposes",
        "title": "Standalone projects > Demo purposes",
        "section": "Demo purposes",
        "text": "Demonstrating the REST and gRPC communication protocols via client-server interactions\nDemo purposes"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#repository-management",
        "title": "Standalone projects > Repository management",
        "section": "Repository management",
        "text": "Ansys tool for creating new projects according to Ansys guidelines\nCollection of GitHub Workflows to be reused by projects in the Ansys ecosystem\nAnsys repository containing customized pre-commit hooks\nAnsys tool intended to synchronize the content of two different repositories\nRepository for updating an organizationâ€™s all-members team automatically\nRepository management\npre-commit\nall-members\nall-members"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#artificial-intelligence",
        "title": "Standalone projects > Artificial intelligence",
        "section": "Artificial intelligence",
        "text": "Python development tool for leveraging the power of OpenAI to automatically\ngenerate suggestions for improving GitHub pull requests\nArtificial intelligence"
    },
    {
        "objectID": "tools/standalone/index",
        "href": "tools/standalone/index.html#documentation",
        "title": "Standalone projects > Documentation",
        "section": "Documentation",
        "text": "Extension of the popular PyData Sphinx theme\nthat is used by numpy, pandas,\npyvista, and many more scientific Python packages\nEnhanced Python API to Meilisearch\nPython development tool for leveraging the power of OpenAI to automatically\ngenerate suggestions for improving GitHub pull requests\nDocumentation"
    }
]