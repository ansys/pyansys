name: pull-request

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: pyansys
  PACKAGE_NAMESPACE: pyansys
  MAIN_PYTHON_VERSION: '3.11'
  DOCUMENTATION_CNAME: "docs.pyansys.com"

jobs:

  check-pipelines:
    name: "Check pipelines"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/check-actions-security@v10
        with:
          generate-summary: true
          token: ${{ secrets.GITHUB_TOKEN }}
          auditing-level: 'high'
          trust-ansys-actions: true

  check-vulnerabilities:
    name: "Check vulnerabilities"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: ansys/actions/check-vulnerabilities@e0de7dd89b2a4c100f74327666d5521cfda17950 # v10.1.1
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          python-package-name: ${{ env.PACKAGE_NAME }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          hide-log: false
          dev-mode: true

  check-licenses:
    name: "Check licenses"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/check-licenses@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          target: "all"
          # TODO: this has MIT license but fails the check, paramiko and ansys-dpf-post
          # need to be removed eventually from the whitelist.
          whitelist-license-check: "attrs,referencing,jeepney,paramiko,ansys-dpf-post"

  doc-style:
    name: "Doc style"
    runs-on: ubuntu-latest
    needs: [check-pipelines, check-vulnerabilities, check-licenses]
    steps:
      - uses: ansys/actions/doc-style@v10
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: Building Documentation
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - uses: ansys/actions/doc-build@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          dependencies: "build-essential zip pandoc texlive-latex-extra latexmk texlive-pstricks"

  tests:
    name: "Test / ${{ matrix.os }} / Python ${{ matrix.python }} / Target ${{ matrix.target }}"
    runs-on: ${{ matrix.os }}
    needs: [check-pipelines, check-vulnerabilities, check-licenses]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python: ['3.10', '3.11', '3.12', '3.13']
        target: ['', 'fluent-all', 'mapdl-all', 'tools', 'all']
    steps:

      - name: "Checkout project"
        uses: actions/checkout@v5

      - name: "Install Python using uv"
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python }}
          cache-dependency-glob: '**/pyproject.toml'
          activate-environment: true

      - name: "Install project"
        env:
          TARGET: ${{ matrix.target }}
        run: |
          if [ -z "${TARGET}" ]; then
            uv pip install .
          else
            uv pip install ".[${TARGET}]"
          fi

      - name: "Test import of package"
        run: python -c "from ${{ env.PACKAGE_NAMESPACE }} import __version__; print(__version__)"

  wheelhouse:
    name: "Wheelhouse / ${{ matrix.os }}Â / ${{ matrix.python }}"
    runs-on: ${{ matrix.os }}
    needs: tests
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: ansys/actions/build-wheelhouse@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ runner.os }}
          python-version: ${{ matrix.python }}
          target: "all"
          # TODO: this has MIT license but fails the check
          whitelist-license-check: "attrs,referencing,jeepney"

      - name: List dependencies (pip freeze)
        run: |
          pip freeze > all-deps-${{ runner.os }}-${{ matrix.python-version }}.txt
          cat all-deps-${{ runner.os }}-${{ matrix.python-version }}.txt

      - name: Upload dependencies list
        uses: actions/upload-artifact@v4
        with:
          name: all-deps-${{ runner.os }}-${{ matrix.python-version }}
          path: all-deps-${{ runner.os }}-${{ matrix.python-version }}.txt
          retention-days: 7

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    needs: [wheelhouse, doc-build]
    steps:
      - uses: ansys/actions/build-library@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  automerge:
    name: "Automerge"
    runs-on: ubuntu-latest
    needs: build-library
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/hk-automerge-prs@v10
        with:
          approver: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          approver-token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
