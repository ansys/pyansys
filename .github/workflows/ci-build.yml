name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: pyansys
  MAIN_PYTHON_VERSION: '3.9'

jobs:

  style:
    name: Code Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
  
      - name: Running Vale
        uses: errata-ai/vale-action@reviewdog
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          files: '["doc", "README.rst"]'
          reporter: github-pr-check
          level: error
          filter_mode: nofilter
          fail_on_error: true
          vale_flags: "--config=doc/.vale.ini"

  core-import:
    name: Build core PyAnsys packages
    runs-on: ${{ matrix.os }}
    needs: [style]
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-core
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Window pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Windows' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-core
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: MacOS pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'macOS' }}
        with:
          path: ~/Library/Caches/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-core
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install core PyAnsys packages
        run: |
          pip install .

      - name: Smoke test
        run: python -c "from pyansys import __version__; print(__version__)"

      - name: Store version
        run: |
          echo "::set-output name=PYANSYS_VERSION::$(python -c "from pyansys import __version__; print(__version__)")"
        id: version

      - name: Generate wheelhouse (for all targets)
        run: |
          pip install wheel
          pip wheel .[all] -w wheelhouse

      - name: Zip wheelhouse
        uses: vimtor/action-zip@v1
        with:
          files: wheelhouse
          dest: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.PYANSYS_VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}.zip

      - name: Upload Wheelhouse
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.PYANSYS_VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}
          path: '*.zip'
          retention-days: 7

  extras-import:
    name: Build extras PyAnsys packages
    runs-on: ${{ matrix.os }}
    needs: [core-import]
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        extras-version: ['fluent-all', 'mapdl-all', 'all']
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ matrix.extras-version }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Window pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Windows' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ matrix.extras-version }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: MacOS pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'macOS' }}
        with:
          path: ~/Library/Caches/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ matrix.extras-version }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install ${{ matrix.extras-version }} PyAnsys packages
        run: |
          pip install .[${{ matrix.extras-version }}]

      - name: Smoke test
        run: python -c "from pyansys import __version__; print(__version__)"

  docs-build:
    name: Building Documentation
    runs-on: ubuntu-latest
    needs: [docs-style]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Build Documentation
        run: |
          pip install .[docs]
          make -C doc html
          touch doc/build/html/.nojekyll

      - name: Upload Documentation
        uses: actions/upload-artifact@v3
        with:
          name: Documentation
          path: doc/build/html
          retention-days: 7

      - name: Deploy Docs
        uses: JamesIves/github-pages-deploy-action@v4.4.0
        if: startsWith(github.event.ref, 'refs/tags')
        with:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: doc/build/html
          CLEAN: true

  package:
    name: Package library
    runs-on: ubuntu-latest
    needs: [docs-build, core-import]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ env.MAIN_PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}-core
          restore-keys: |
            Python-${{ runner.os }}-${{ env.MAIN_PYTHON_VERSION }}

      - name: Install dependencies and build the library
        run: |
          python -m pip install --upgrade pip poetry twine
          python -m poetry build
          python -m twine check dist/*

      - name: Install PyAnsys from wheel
        run: |
          pip install dist/*.whl

      - name: Upload wheel and binaries
        uses: actions/upload-artifact@v3
        with:
          name: PyAnsys-packages
          path: dist/
          retention-days: 7

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [package]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload to Public PyPi
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.zip
            ./**/*.whl
            ./**/*.tar.gz
